import cv2  # OpenCV kÃ¼tÃ¼phanesini iÃ§e aktarÄ±yoruz.
import numpy as np  # SayÄ±sal iÅŸlemler iÃ§in NumPy kÃ¼tÃ¼phanesini iÃ§e aktarÄ±yoruz.

# KÃ¼tÃ¼phaneler yalnÄ±zca komut satÄ±rÄ±na:
# pip install opencv-python
# Åžeklinde yazÄ±ldÄ±ÄŸÄ±nda kolaylÄ±kla kurulumu yapÄ±labilir



# GÃ¶rÃ¼ntÃ¼ler Ã§ok basit olarak 2 boyutlu matrislerden oluÅŸur yani matrisler listeler iÃ§indeki eÅŸit uzunluktaki listeler olarak ifade edilebilir.
# Ve liste iÅŸlemleriyle aynÄ± olarak matrislerle Ã§alÄ±ÅŸÄ±labilir. Bundan dolayÄ± matrisler listeler olarak da iÅŸlev gÃ¶rmektedir.
# Ã–rnek olarak 5'e 5'lik bir matris: (5 satÄ±r ve 5 sÃ¼tun uzunluÄŸunda)
#  +------0----1----2----3----4----> X
#  |  [
#  0     [120, 130, 156, 32 , 21], <- 0. indexteki satÄ±r
#  1     [87 , 65 , 43 , 210, 99],
#  2     [54 , 178, 201, 15 , 76],
#  3     [33 , 140, 89 , 190, 11],
#  4     [41 , 84 , 193, 54 , 0 ]  <- 4. indexteki satÄ±r
#  |  ]
#  Y

# Burada eleman alma iÅŸlemi karmaÅŸÄ±k olabilir fakat eleman alÄ±rken ilk Ã¶nce satÄ±r deÄŸeri yazÄ±lÄ±r sonrasÄ±nda sÃ¼tun deÄŸeri yazÄ±lÄ±r
# spesifik deÄŸer alma Ã¶rneÄŸi:
# matris[Y, X]
# Ã¶rnek olarak yukarÄ±daki matrisin 0. sÃ¼tun ve 0. satÄ±rÄ±na ulaÅŸabilmek iÃ§in
# matris[0, 0]
# yazÄ±lmalÄ±dÄ±r ve Ã§Ä±kÄ±ÅŸ matris[0, 0] Ã§Ä±kÄ±ÅŸ deÄŸeri 120 olacaktÄ±r

# matris[0] Ä±n Ã§Ä±ktÄ±sÄ± 0. indexteki satÄ±rÄ±n tamamÄ±dÄ±r yani 0. satÄ±rdaki listenin hepsini almaktadÄ±r.
# print(matris[0])
# Ã‡Ä±ktÄ±: [120, 130, 156, 32 , 21]


# SonrasÄ±nda yapÄ±lan iÅŸ bu listedeki elemanÄ± almaktÄ±r.
# print(matris[0, 0])
# Ã‡Ä±ktÄ±: 120
# matris[2, 2] nin Ã§Ä±kÄ±ÅŸ deÄŸeri 201 dir
# matris[4, 0] Ä±n  Ã§Ä±kÄ±ÅŸ deÄŸeri 41  dir
# matris[1, 3] Ã¼n  Ã§Ä±kÄ±ÅŸ deÄŸeri 210 dur


# AÅŸaÄŸÄ±daki kodu kullanarak matris deÄŸerleriyle oynayabilirsiniz yada daha yakÄ±ndan inceleyebilirsiniz
"""
matris = [
    [120, 130, 156, 32 , 21],
    [87 , 65 , 43 , 210, 99],
    [54 , 178, 201, 15 , 76],
    [33 , 140, 89 , 190, 11],
    [41 , 84 , 193, 54 , 0 ]
]
matris = np.array(matris)                                            # Listeyi matrise dÃ¶nÃ¼ÅŸtÃ¼rme iÅŸlemi
print(matris[4, 0])                                                  # matrisin 4. satÄ±r 0. sÃ¼tundaki deÄŸerini alma iÅŸlemi
matris[4, 4] = 0                                                     # matris deÄŸerlerinde deÄŸiÅŸiklik yapabilirsiniz
"""





# OluÅŸturduÄŸunuz matrisi aÅŸaÄŸÄ±daki koddan gÃ¶rÃ¼ntÃ¼leyebilirsiniz:
"""
matris = np.uint8(matris)                                               # unsigned integer 8 deÄŸerine dÃ¶nÃ¼ÅŸtÃ¼rme iÅŸlemi. Resimler standart olarak 0 ile 255 arasÄ±na yani 8 bitlik gÃ¶rÃ¼ntÃ¼lerdir.
                                                                        # matrisin veri tipi bu kod ile belirlenir
matris = cv2.resize(matris, (600, 600), interpolation=cv2.INTER_NEAREST)# KÃ¼bik olarak yeniden boyutlandÄ±rma
cv2.imshow("Benim matrisim :)", matris)                                 # Ekrana gÃ¶sterme
cv2.waitKey(0)
"""




# matris eÄŸitiminden sonra diÄŸer eÄŸitime geÃ§elim
# 1. Bir gÃ¶rÃ¼ntÃ¼yÃ¼ yÃ¼kleyelim.

image = cv2.imread(r"26_introducing_to_opencv/Lena.png") # EÄŸer dosya yolu bulunamÄ±yorsa yada gÃ¶rÃ¼ntÃ¼ bu yolu deÄŸiÅŸtirdiÄŸiniz halde okunamadÄ±ysa bilgisayarÄ±nÄ±zda bulunan resmin Ã¼stÃ¼ne saÄŸ tÄ±klayÄ±p yolu kopyala
                                    # butonuna tÄ±klayÄ±nÄ±z. SonrasÄ±nda r yazÄ±sÄ±nÄ± kaldÄ±rmadan dosya yolunu yapÄ±ÅŸtÄ±rÄ±nÄ±z.



# 2. GÃ¶rÃ¼ntÃ¼yÃ¼ ekrana gÃ¶sterelim.

cv2.imshow('Original Image', image)     # cv2.imshow(str, matrix) deÄŸeri almaktadÄ±r. String deÄŸeri yalnÄ±zca pencerenin yazÄ±sÄ±nÄ± belli eder ondan dolayÄ± Ã¶nemli deÄŸildir
cv2.waitKey(0)                          # cv2.waitKey(0) KoymamÄ±zÄ±n nedeni gÃ¶rselin sÃ¼resiz bir ÅŸekilde gÃ¶stermek istememizdir. 0 deÄŸerine herhangi baÅŸka bir sayÄ± yazÄ±labilir
                                        # cv2.waitKey fonksiyonundaki sayÄ± deÄŸeri gÃ¶rselin milisaniye bakÄ±mÄ±ndan ne kadar kalacaÄŸÄ±nÄ± belirler. EÄŸer deÄŸer 5000 olursa gÃ¶rsel 5 saniye
                                        # boyunca ekranda kalÄ±r


# 3. GÃ¶rÃ¼ntÃ¼de matrix iÅŸlemleri
# GÃ¶rseldeki tek bir matrixi gÃ¶rÃ¼ntÃ¼leyelim:
"""
print(image[250, 250]) # GÃ¶rsel iÃ§indeki 250. satÄ±rdaki ve 250. sÃ¼tundaki renk deÄŸerlerini inceleyelim
"""


# Ã‡Ä±ktÄ±: [167 175 215]
# Ã‡Ä±ktÄ±da (B, G, R) kanallarÄ±nÄ±n hangi renk deÄŸerlerini aldÄ±ÄŸÄ±nÄ± gÃ¶sterir
# B kanalÄ±nÄ±n renk deÄŸeri: 167
# G kanalÄ±nÄ±n renk deÄŸeri: 175
# R kanalÄ±nÄ±n renk deÄŸeri: 215


# AÅŸaÄŸÄ±daki gibi (BGR) formatÄ±nda olan gÃ¶rÃ¼ntÃ¼lerin teker teker B, G, R kanallarÄ±nÄ± alÄ±yoruz
"""
B = image[:, :, 0] # Matrixin iÃ§indeki tÃ¼m mavi    rengi alÄ±yoruz
G = image[:, :, 1] # Matrixin iÃ§indeki tÃ¼m yeÅŸil   rengi alÄ±yoruz
R = image[:, :, 2] # Matrixin iÃ§indeki tÃ¼m kÄ±rmÄ±zÄ± rengi alÄ±yoruz



merged_image = cv2.hconcat([B, G, R])   # GÃ¶rÃ¼ntÃ¼leri karÅŸÄ±laÅŸtÄ±rma yapmak amacÄ±yla birleÅŸtiriyoruz
cv2.imshow("merge", merged_image)       # GÃ¶rÃ¼ntÃ¼ler tek kanallÄ± olduÄŸu iÃ§in yalnÄ±zca grayscale yani gri tonlamalÄ± olarak gÃ¶rÃ¼necektir
cv2.imshow("normal_image", image)       # Resmin kendisi
cv2.waitKey(0)
"""

# image.shape kodunu yazarak gÃ¶rselin boyutunu Ã¶ÄŸrenebilirsiniz
# Ã‡Ä±ktÄ± olarak (512, 512, 3) Ã‡Ä±ktÄ±sÄ± Ã¼retecektir. 
# Nedeni gÃ¶rselin boyunun 512 pixel, eninin 512 pixel ve 3 kanallÄ± (BGR) renk yapÄ±sÄ±na sahip olmasÄ±dÄ±r
"""
print(image.shape)
"""

# 4. GÃ¶rÃ¼ntÃ¼yÃ¼ gri tonlamaya Ã§evirelim.
"""
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # cv2.COLOR_BGR2GRAY yerine farklÄ± deÄŸerler kullanabilirsiniz. BunlarÄ±n hepsini inceleyebilirsiniz.
cv2.imshow("image", gray_image)
cv2.waitKey(0)


# Gri tonlamadaki pixel deÄŸerini inceleyelim
print(gray_image[250, 250])
# Ã‡Ä±ktÄ±: 186
# GÃ¶rÃ¼ntÃ¼ belirli hesaplamalarla gri tonlamaya yani yalnÄ±zca tek bir renk kanalÄ±na dÃ¶nÃ¼ÅŸtÃ¼ÄŸÃ¼ iÃ§in 3 adet renk deÄŸeri yerine 1 adet renk deÄŸeri gÃ¶rÃ¼nÃ¼r

"""



# 5. GÃ¶rÃ¼ntÃ¼yÃ¼ bulanÄ±klaÅŸtÄ±ralÄ±m.
"""
blurred_image = cv2.GaussianBlur(image, (3, 3), 0)  # Blurlama iÃ§in gauss bulanÄ±klaÅŸtÄ±rma algoritmasÄ± uygulanÄ±r
cv2.imshow('Blurred Image', blurred_image)
cv2.waitKey(0)
"""

# 6. GÃ¶rÃ¼ntÃ¼ Ã¼zerinde kenar tespiti yapalÄ±m.
"""
edges = cv2.Canny(image, 50, 150)       # Canny fonksiyonunda gÃ¶rselin kendisi ve bunlarla beraber alt sÄ±nÄ±f ve Ã¼st sÄ±nÄ±r belirlenir
cv2.imshow('Edge Detection', edges)
cv2.waitKey(0)
"""

# 7. GÃ¶rÃ¼ntÃ¼yÃ¼ yeniden boyutlandÄ±ralÄ±m.
"""
resized_image = cv2.resize(image, (800, 800))   # GÃ¶rÃ¼ntÃ¼ 800x800 lÃ¼k geniÅŸliÄŸe sahip olur
cv2.imshow('Resized Image', resized_image)
cv2.waitKey(0)
"""


# 8. GÃ¶rÃ¼ntÃ¼leri yatay ve dikey birleÅŸtirelim.
"""
hconcat_image = cv2.hconcat([image, image])                     # Yatay birleÅŸtirme fonksiyonu
cv2.imshow('Horizontally Concatenated Image', hconcat_image)
cv2.waitKey(0)
"""

"""
vconcat_image = cv2.vconcat([image, image])                     # Dikey birleÅŸtirme fonksiyonu
cv2.imshow('Vertically Concatenated Image', vconcat_image)
cv2.waitKey(0)
"""



# 9. GÃ¶rÃ¼ntÃ¼ Ã¼zerine dikdÃ¶rtgen Ã§izelim.
"""
image_with_rectangle = image.copy()                        # Copy iÅŸlemi orijinal gÃ¶rÃ¼ntÃ¼yÃ¼ deÄŸiÅŸtirmemek iÃ§in kullanÄ±lÄ±r.

# image_copy = image iÅŸlemi aynÄ± gÃ¶rseli ifade ettiÄŸinden image_copy Ã¼zerinde yapÄ±lan deÄŸiÅŸikliklerden orijinal gÃ¶rÃ¼ntÃ¼ de etkilenir bundan dolayÄ± copy() fonksiyonu ile gÃ¶rsel baÅŸka bir deÄŸiÅŸkene kopyalanÄ±r

cv2.rectangle(image_with_rectangle, (50, 50), (250, 250), (0, 255, 0), 3)   # Fonksiyonda gÃ¶rÃ¼ntÃ¼, 1. pixel noktasÄ±, 2. pixel noktasÄ±, renk ve kalÄ±nlÄ±k argÃ¼man olarak verilmiÅŸtir
cv2.imshow('Image with Rectangle', image_with_rectangle)
cv2.waitKey(0)
"""

# 10. GÃ¶rÃ¼ntÃ¼nÃ¼n belirli bir kÄ±smÄ±nÄ± tamamen mavi yapalÄ±m.
# Bu iÅŸlemde gÃ¶rÃ¼ntÃ¼ direkt manÃ¼pile edilerek pixel deÄŸerleri deÄŸiÅŸtirilmiÅŸtir
"""
image_with_blue_patch = image.copy()
image_with_blue_patch[200:300, 200:300] = (255, 0, 0)  # BGR formatÄ±nda mavi renk
cv2.imshow('Image with Blue Patch', image_with_blue_patch)
cv2.waitKey(0)
"""

# 11. GÃ¶rÃ¼ntÃ¼ Ã¼zerine daire Ã§izelim.
"""
image_with_circle = image.copy()
cv2.circle(image_with_circle, (150, 150), 50, (0, 0, 255), -1)  # KÄ±rmÄ±zÄ± dolu daire
cv2.imshow('Image with Circle', image_with_circle)
cv2.waitKey(0)
"""

# 12. GÃ¶rÃ¼ntÃ¼ Ã¼zerine yazÄ± ekleyelim.
"""
image_with_text = image.copy()
cv2.putText(image_with_text, 'OpenCV Tutorial', (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2) # Bu fonksiyonda oynama yaparak ne iÅŸe yaradÄ±klarÄ±nÄ± inceleyebilirsiniz
cv2.imshow('Image with Text', image_with_text)
cv2.waitKey(0)
"""

# 13. GÃ¶rÃ¼ntÃ¼yÃ¼ kaydedelim.
"""
cv2.imwrite("new_image.jpg", image) # GÃ¶rÃ¼ntÃ¼ jpg, jpeg, png, ve diÄŸer farklÄ± formatlarda da kaydedilebilir
"""
# OpenCV tutorial tamamlandÄ±! ðŸ˜Š